version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: snap_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: snap_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - snap_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d snap_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: snap_redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost for security
    volumes:
      - redis_data:/data
    networks:
      - snap_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: snap_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - snap_network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9100/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: snap_cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - snap_network
    privileged: true
    devices:
      - /dev/kmsg
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # pgAdmin - Database Management Tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: snap_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@snap.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - snap_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: snap_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"  # External access for monitoring
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - snap_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: snap_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: 'grafana-piechart-panel,grafana-worldmap-panel'
    ports:
      - "3001:3000"  # External access for dashboard
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - snap_network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SNAP Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: snap_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: snap_db
      DB_MAX_CONNECTIONS: 20
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-here-change-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      FRONTEND_URL: http://localhost:5173
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - snap_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  # SNAP Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: snap_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      # API configuration for production build
      VITE_API_BASE_URL: http://backend:3000/api
      VITE_GOOGLE_MAPS_API_KEY: AIzaSyC_Fa79ugNW4zigkTvBWY4sqdD0Al2Ij_U
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - snap_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:

networks:
  snap_network:
    driver: bridge